diff --git a/src/components/column-item/column-item.tsx b/src/components/column-item/column-item.tsx
index 6d76723..ffd6f41 100644
--- a/src/components/column-item/column-item.tsx
+++ b/src/components/column-item/column-item.tsx
@@ -1,7 +1,7 @@
 import { Text } from 'react-native';
 import styled from 'styled-components';
 
-import { Column } from '../../type/data';
+import { Column } from '../../store/ducks/board/types';
 
 interface ColumnItemProps {
   column: Column;
diff --git a/src/store/store.ts b/src/store/store.ts
index b369064..d619e47 100644
--- a/src/store/store.ts
+++ b/src/store/store.ts
@@ -1,5 +1,5 @@
 import AsyncStorage from '@react-native-community/async-storage';
-import { fork } from '@redux-saga/core/effects';
+import { all } from '@redux-saga/core/effects';
 import { combineReducers, configureStore } from '@reduxjs/toolkit';
 import { persistReducer, persistStore } from 'redux-persist';
 import createSagaMiddleware from 'redux-saga';
@@ -25,17 +25,12 @@ export const store = configureStore({
   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(sagaMiddleware),
 });
 
-const storeFunc = () => store;
-
 function* rootSaga() {
-  yield fork(watchAuth);
-  yield fork(getColumnsWatcher);
-  yield fork(addColumnWatcher);
+  yield all([watchAuth, getColumnsWatcher, addColumnWatcher]);
 }
 sagaMiddleware.run(rootSaga);
 
 export const persistor = persistStore(store);
 
 export type RootState = ReturnType<typeof rootReducer>;
-export type AppStore = ReturnType<typeof storeFunc>;
-export type AppDispatch = AppStore['dispatch'];
+export type AppDispatch = typeof store.dispatch;
